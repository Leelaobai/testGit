上午：
继续学习git使用
计划学习到：Rebase
之后学习Go的语法
然后学习Go Web编程到80页。

下午：


知识点：
	1、查看分支命令：git branch。该命令将会列出所有的分支，并在当前分支前有一个*号
	2、创建新分支命令：git branch <name>
	3、切换分支：git checkout <name>
	4、创建+切换分支：git checkout -b <name>
	5、删除分支：git branch -d <name>
	6、合并某分支到当前分支：git merge <name>
	7、一般推荐使用分支完成某个任务，然后合并后再删掉分支，这和直接在master分支上工作效果是一样的。
	8、当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，在合并完成。
	9、解决冲突就是把git合并失败的文件手动编辑为我们希望的内容，再提交。
	10、使用git log --graph --pretty=oneline --abbrev-commit命令可以看到分支合并图。
	11、在合并分支时加上--no-ff参数可以使用普通模式合并分支，合并后的历史有分支可以看出曾经合并过，而fast forward合并看不出来。
		命令为：git merge --no-ff -m 使用no-ff模式合并 dev
	12、分支策略：
		在实际开发中，我们应该按照几个基本原则进行分支管理：
		首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
		干活都在dev分支上，也就是说，dev分支是不稳定的。
		到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
		每个人都在dev分支上干活：每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	13、git stash命令：把当前工作现场”储藏“起来，等以后恢复现场继续工作。
	14、修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，
		修复后，再git stash pop，回到工作现场
	15、开发一个新feature，最好新建一个分支；
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	16、并不是一定要把本地分支往远程推送，哪些分支需要推送，哪些不需要？
		master分支是主分支，因此要时刻与远程同步；
		dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
		bug分支只用于在本地修复bug，就没必要推到远程了；
		feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	17、多人协作的工作模式通常是这样：
		首先，可以试图用git push origin <branch-name>推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
		用命令git branch --set-upstream-to=origin/remote_branch  your_branch.
	18、查看远程库信息，使用git remote -v；
		本地新建的分支如果不推送到远程，对其他人就是不可见的；
		从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
		建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/remote_branch  your_branch；
		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	19、rebase操作可以把本地未push的分叉提交历史整理成直线；
		rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。